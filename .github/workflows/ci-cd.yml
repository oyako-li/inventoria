name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # テスト・ビルド・デプロイ
  test-and-build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: inventoria_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        npm install
        cd frontend && pnpm install
        uv sync

    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/inventoria_test
        SECRET_KEY: test-secret-key
        TEAM_ID: test-team-id
      run: |
        uv run pytest tests/ || echo "No tests found"

    - name: Run frontend tests
      run: |
        cd frontend
        pnpm run test || echo "No tests found"

    - name: Run linting
      run: |
        cd frontend && pnpm run lint
        # Backend linting can be added here

    - name: Build frontend
      run: |
        cd frontend && pnpm run build

    - name: Build backend
      run: |
        uv run python -m py_compile main.py

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          frontend/dist/
          static/
          templates/

  # デプロイ（mainブランチのみ）
  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # ここに実際のデプロイスクリプトを追加
        # 例: Docker Hubへのプッシュ、サーバーへのデプロイなど 